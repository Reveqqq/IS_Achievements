// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240529081715_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78fae1a7-c1e6-4a9f-8811-4948c9f390b4"),
                            AdminLogin = "admin",
                            RequestId = new Guid("5a7db9e6-054a-454f-baf7-5b35b94c4f6b"),
                            Score = 95.5f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5911)
                        },
                        new
                        {
                            Id = new Guid("92a09857-8a63-472d-90ef-a6d81f3e12bb"),
                            AdminLogin = "admin",
                            RequestId = new Guid("1495665f-c673-4c99-a519-4cad151377c4"),
                            Score = 88f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 7, 17, 14, 939, DateTimeKind.Utc).AddTicks(5912)
                        },
                        new
                        {
                            Id = new Guid("30e21ab5-698c-4595-af68-4705bde5c534"),
                            AdminLogin = "admin",
                            RequestId = new Guid("ea4967f7-b69a-4dcf-bb33-e86273238af2"),
                            Score = 92.3f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 6, 17, 14, 939, DateTimeKind.Utc).AddTicks(5914)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07a9ca17-6aae-424b-875b-3fb1a60952b3"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5935),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1"
                        },
                        new
                        {
                            Id = new Guid("9009581c-c4b1-426e-8b77-4f6fb0ffc2ae"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 7, 17, 14, 939, DateTimeKind.Utc).AddTicks(5937),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2"
                        },
                        new
                        {
                            Id = new Guid("6e7441a7-d3ee-4c12-90ab-849bbdfff559"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 6, 17, 14, 939, DateTimeKind.Utc).AddTicks(5939),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51deb0d3-31f7-4e9e-b2cb-8997188167a2"),
                            Datetime = new DateTime(2024, 5, 29, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5962),
                            RequestId = new Guid("5a7db9e6-054a-454f-baf7-5b35b94c4f6b"),
                            Text = "This is a sample comment 1."
                        },
                        new
                        {
                            Id = new Guid("1e7edaf3-b99c-486f-bfb1-8db726edc7a4"),
                            Datetime = new DateTime(2024, 5, 29, 7, 17, 14, 939, DateTimeKind.Utc).AddTicks(5964),
                            RequestId = new Guid("1495665f-c673-4c99-a519-4cad151377c4"),
                            Text = "This is a sample comment 2."
                        },
                        new
                        {
                            Id = new Guid("f395c12e-fe57-47c9-8c9f-443b63dfe9d8"),
                            Datetime = new DateTime(2024, 5, 29, 6, 17, 14, 939, DateTimeKind.Utc).AddTicks(5966),
                            RequestId = new Guid("ea4967f7-b69a-4dcf-bb33-e86273238af2"),
                            Text = "This is a sample comment 3."
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("303e3d6f-a792-4b5e-a6b1-3c02054accc1"),
                            RequestId = new Guid("5a7db9e6-054a-454f-baf7-5b35b94c4f6b")
                        },
                        new
                        {
                            Id = new Guid("13d3bf86-5072-48f5-8352-b563a6dd8e7e"),
                            RequestId = new Guid("1495665f-c673-4c99-a519-4cad151377c4")
                        },
                        new
                        {
                            Id = new Guid("df1f5b4c-cb0d-43c1-909b-3ec0f08b63bb"),
                            RequestId = new Guid("ea4967f7-b69a-4dcf-bb33-e86273238af2")
                        });
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            Nickname = "Administrator",
                            Password = "admin_password",
                            Refresh = "admin_refresh_token",
                            RefreshExpire = new DateTime(2024, 6, 28, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5665),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            Nickname = "User One",
                            Password = "user1_password",
                            Refresh = "user1_refresh_token",
                            RefreshExpire = new DateTime(2024, 6, 28, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5671),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            Nickname = "User Two",
                            Password = "user2_password",
                            Refresh = "user2_refresh_token",
                            RefreshExpire = new DateTime(2024, 6, 28, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5672),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            Nickname = "User Three",
                            Password = "user3_password",
                            Refresh = "user3_refresh_token",
                            RefreshExpire = new DateTime(2024, 6, 28, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5674),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a7db9e6-054a-454f-baf7-5b35b94c4f6b"),
                            DateTime = new DateTime(2024, 5, 29, 8, 17, 14, 939, DateTimeKind.Utc).AddTicks(5865),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            IsOpen = false,
                            OwnerLogin = "user1"
                        },
                        new
                        {
                            Id = new Guid("1495665f-c673-4c99-a519-4cad151377c4"),
                            DateTime = new DateTime(2024, 5, 29, 6, 17, 14, 939, DateTimeKind.Utc).AddTicks(5867),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("ea4967f7-b69a-4dcf-bb33-e86273238af2"),
                            DateTime = new DateTime(2024, 5, 29, 4, 17, 14, 939, DateTimeKind.Utc).AddTicks(5870),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("54020c93-8355-4d58-a337-457d4968b9fe"),
                            DateTime = new DateTime(2024, 5, 29, 4, 17, 14, 939, DateTimeKind.Utc).AddTicks(5887),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            IsOpen = false,
                            OwnerLogin = "user3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
