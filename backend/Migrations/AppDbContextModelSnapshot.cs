// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9d7de43-da2c-4987-86cf-8bb45e57c6d3"),
                            AdminLogin = "admin",
                            RequestId = new Guid("2331975a-8c2e-4f35-9de2-61c79f6ffdf0"),
                            Score = 95.5f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4840)
                        },
                        new
                        {
                            Id = new Guid("0cf5d7f3-7f4b-459e-9f60-2c2dc3c69ca1"),
                            AdminLogin = "admin",
                            RequestId = new Guid("2afa5cce-fbcb-45ff-8f5c-96c5c911075d"),
                            Score = 88f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 13, 39, 14, 994, DateTimeKind.Utc).AddTicks(4843)
                        },
                        new
                        {
                            Id = new Guid("66627ae3-db75-4968-be27-191471a37ea4"),
                            AdminLogin = "admin",
                            RequestId = new Guid("b3099f97-b15d-41ae-b741-8a434354b604"),
                            Score = 92.3f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 12, 39, 14, 994, DateTimeKind.Utc).AddTicks(4846)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13498067-f6d5-4119-9177-7ef36b72baba"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4887),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1"
                        },
                        new
                        {
                            Id = new Guid("51132e40-443d-41b5-a473-b8f18bfd022f"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 13, 39, 14, 994, DateTimeKind.Utc).AddTicks(4890),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2"
                        },
                        new
                        {
                            Id = new Guid("16598089-f9c7-4148-8156-d053de59e77a"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 12, 39, 14, 994, DateTimeKind.Utc).AddTicks(4894),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bd87f5d-1d18-47ad-b4a6-5920eecf6419"),
                            Datetime = new DateTime(2024, 5, 29, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4936),
                            RequestId = new Guid("2331975a-8c2e-4f35-9de2-61c79f6ffdf0"),
                            Text = "This is a sample comment 1."
                        },
                        new
                        {
                            Id = new Guid("05c52dd0-ad34-4e98-9ddc-c945ee61a695"),
                            Datetime = new DateTime(2024, 5, 29, 13, 39, 14, 994, DateTimeKind.Utc).AddTicks(4939),
                            RequestId = new Guid("2afa5cce-fbcb-45ff-8f5c-96c5c911075d"),
                            Text = "This is a sample comment 2."
                        },
                        new
                        {
                            Id = new Guid("39363588-c412-4517-ac5e-dd2d9ea5c93f"),
                            Datetime = new DateTime(2024, 5, 29, 12, 39, 14, 994, DateTimeKind.Utc).AddTicks(4942),
                            RequestId = new Guid("b3099f97-b15d-41ae-b741-8a434354b604"),
                            Text = "This is a sample comment 3."
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db26ef54-2b17-4aea-b31d-05a140b726ac"),
                            RequestId = new Guid("2331975a-8c2e-4f35-9de2-61c79f6ffdf0")
                        },
                        new
                        {
                            Id = new Guid("fb63c831-346f-4705-991e-bdef6c86e741"),
                            RequestId = new Guid("2afa5cce-fbcb-45ff-8f5c-96c5c911075d")
                        },
                        new
                        {
                            Id = new Guid("38584614-4726-44e9-8417-7546e4375a90"),
                            RequestId = new Guid("b3099f97-b15d-41ae-b741-8a434354b604")
                        },
                        new
                        {
                            Id = new Guid("b645f67e-e671-4b87-946e-dfbbfc94055a"),
                            RequestId = new Guid("75b0911d-b08f-4129-b005-759980534a69")
                        });
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            Nickname = "Administrator",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4466),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            Nickname = "User One",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4473),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            Nickname = "User Two",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4476),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            Nickname = "User Three",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4478),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2331975a-8c2e-4f35-9de2-61c79f6ffdf0"),
                            DateTime = new DateTime(2024, 5, 29, 14, 39, 14, 994, DateTimeKind.Utc).AddTicks(4722),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            IsOpen = false,
                            OwnerLogin = "user1"
                        },
                        new
                        {
                            Id = new Guid("2afa5cce-fbcb-45ff-8f5c-96c5c911075d"),
                            DateTime = new DateTime(2024, 5, 29, 12, 39, 14, 994, DateTimeKind.Utc).AddTicks(4726),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("b3099f97-b15d-41ae-b741-8a434354b604"),
                            DateTime = new DateTime(2024, 5, 29, 10, 39, 14, 994, DateTimeKind.Utc).AddTicks(4750),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("75b0911d-b08f-4129-b005-759980534a69"),
                            DateTime = new DateTime(2024, 5, 29, 10, 39, 14, 994, DateTimeKind.Utc).AddTicks(4754),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            IsOpen = true,
                            OwnerLogin = "user3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
