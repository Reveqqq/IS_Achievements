// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240607153326_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("256742f7-f3e4-411d-baa4-06def7e0e38a"),
                            AdminLogin = "admin",
                            RequestId = new Guid("620859cd-4ed4-451d-b1e9-be0d9cec8ad5"),
                            Score = 95.5f,
                            VerificationDatetime = new DateTime(2024, 6, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4824)
                        },
                        new
                        {
                            Id = new Guid("2562254f-9425-42b2-b181-0a1440d74749"),
                            AdminLogin = "admin",
                            RequestId = new Guid("88e1ab02-9b81-42a1-9f0c-1454b08e678f"),
                            Score = 88f,
                            VerificationDatetime = new DateTime(2024, 6, 7, 14, 33, 25, 926, DateTimeKind.Utc).AddTicks(4829)
                        },
                        new
                        {
                            Id = new Guid("3400efb5-d8dc-4da0-8663-ac812128ea08"),
                            AdminLogin = "admin",
                            RequestId = new Guid("34f6a61f-3e13-4dfc-9340-759c8ee147bd"),
                            Score = 92.3f,
                            VerificationDatetime = new DateTime(2024, 6, 7, 13, 33, 25, 926, DateTimeKind.Utc).AddTicks(4835)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4293fc75-bd33-4ce2-8adc-6c58ed59d45a"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 6, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4926),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1"
                        },
                        new
                        {
                            Id = new Guid("fefacaab-abcd-4ddd-822b-77834ab388bb"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 6, 7, 14, 33, 25, 926, DateTimeKind.Utc).AddTicks(4934),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2"
                        },
                        new
                        {
                            Id = new Guid("18dfa727-8a33-44cb-a4e1-38029ff5c197"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 6, 7, 13, 33, 25, 926, DateTimeKind.Utc).AddTicks(4940),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b8dca55-bf4a-4256-8cbd-49548177efc3"),
                            Datetime = new DateTime(2024, 6, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(5028),
                            RequestId = new Guid("620859cd-4ed4-451d-b1e9-be0d9cec8ad5"),
                            Text = "This is a sample comment 1."
                        },
                        new
                        {
                            Id = new Guid("24c0d96d-30e8-4ef9-a409-87cdc1ab46d7"),
                            Datetime = new DateTime(2024, 6, 7, 14, 33, 25, 926, DateTimeKind.Utc).AddTicks(5033),
                            RequestId = new Guid("88e1ab02-9b81-42a1-9f0c-1454b08e678f"),
                            Text = "This is a sample comment 2."
                        },
                        new
                        {
                            Id = new Guid("6faa9405-264c-4e1f-b38f-ddbadb4c6c09"),
                            Datetime = new DateTime(2024, 6, 7, 13, 33, 25, 926, DateTimeKind.Utc).AddTicks(5038),
                            RequestId = new Guid("34f6a61f-3e13-4dfc-9340-759c8ee147bd"),
                            Text = "This is a sample comment 3."
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("FileName");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            FileName = "578cc1e8-cd47-4e63-b045-fd661a63affb",
                            RequestId = new Guid("620859cd-4ed4-451d-b1e9-be0d9cec8ad5")
                        },
                        new
                        {
                            FileName = "a54e6d85-dc0c-4114-8e6f-5600ff69b9c7",
                            RequestId = new Guid("88e1ab02-9b81-42a1-9f0c-1454b08e678f")
                        },
                        new
                        {
                            FileName = "95806d77-3214-4a78-96c5-d2ada6d311fc",
                            RequestId = new Guid("34f6a61f-3e13-4dfc-9340-759c8ee147bd")
                        },
                        new
                        {
                            FileName = "f772f9b2-a484-46de-91d1-3b9ab31d24b4",
                            RequestId = new Guid("07ca9911-9553-425c-aa1c-c0843d524f46")
                        });
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            Nickname = "Administrator",
                            Password = "$2a$11$QBOwTM/1G3zIqQBll7vQDel21tMOmMngs20z0bxrVLEqxyY3tHT02",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 7, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4260),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            Nickname = "User One",
                            Password = "$2a$11$b63c2UhfmVGeeUWTnHlas.bk32AEQffYtnGdcX.NT0vzlNCLdZZVm",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 7, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4274),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            Nickname = "User Two",
                            Password = "$2a$11$PW7Dapz13EKI/xGqXjK.Y.DJgkGU39nz79UQyUr6bc4I1UNoUJCey",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 7, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4277),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            Nickname = "User Three",
                            Password = "$2a$11$ACFe85jXeKSHr7m3uycOsu4QN9/FbLb/YgTQ/v7UlR22DvoSX5gbW",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 7, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4281),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("620859cd-4ed4-451d-b1e9-be0d9cec8ad5"),
                            DateTime = new DateTime(2024, 6, 7, 15, 33, 25, 926, DateTimeKind.Utc).AddTicks(4680),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            IsOpen = false,
                            OwnerLogin = "user1"
                        },
                        new
                        {
                            Id = new Guid("88e1ab02-9b81-42a1-9f0c-1454b08e678f"),
                            DateTime = new DateTime(2024, 6, 7, 13, 33, 25, 926, DateTimeKind.Utc).AddTicks(4690),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("34f6a61f-3e13-4dfc-9340-759c8ee147bd"),
                            DateTime = new DateTime(2024, 6, 7, 11, 33, 25, 926, DateTimeKind.Utc).AddTicks(4721),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("07ca9911-9553-425c-aa1c-c0843d524f46"),
                            DateTime = new DateTime(2024, 6, 7, 11, 33, 25, 926, DateTimeKind.Utc).AddTicks(4727),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            IsOpen = true,
                            OwnerLogin = "user3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
