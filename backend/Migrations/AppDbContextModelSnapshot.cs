// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10178a65-ed05-45df-bb46-4233eee50705"),
                            AdminLogin = "admin",
                            RequestId = new Guid("590f67f1-3dc0-4984-849d-7042411ee438"),
                            Score = 95.5f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6777)
                        },
                        new
                        {
                            Id = new Guid("cbf0502a-bf83-4012-9676-3e2a4fcacf56"),
                            AdminLogin = "admin",
                            RequestId = new Guid("cb2951d9-028a-4f0b-b97e-4edea80e6023"),
                            Score = 88f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 15, 45, 57, 832, DateTimeKind.Utc).AddTicks(6782)
                        },
                        new
                        {
                            Id = new Guid("5440db13-c5c2-4a1c-93d3-01b0a548447f"),
                            AdminLogin = "admin",
                            RequestId = new Guid("207fd7b5-d5e5-43e8-80b8-d4c672669797"),
                            Score = 92.3f,
                            VerificationDatetime = new DateTime(2024, 5, 29, 14, 45, 57, 832, DateTimeKind.Utc).AddTicks(6794)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8ff3cca-d3a8-4846-8aca-a156fa9905c4"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6865),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1"
                        },
                        new
                        {
                            Id = new Guid("cedb16da-c3d4-406f-85c1-95fdc1b04407"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 15, 45, 57, 832, DateTimeKind.Utc).AddTicks(6873),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2"
                        },
                        new
                        {
                            Id = new Guid("c12300c3-5bfd-43e9-874b-001ef716836a"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 5, 29, 14, 45, 57, 832, DateTimeKind.Utc).AddTicks(6878),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90ec30a9-8b4d-45f3-ae51-3fcf2be63606"),
                            Datetime = new DateTime(2024, 5, 29, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6959),
                            RequestId = new Guid("590f67f1-3dc0-4984-849d-7042411ee438"),
                            Text = "This is a sample comment 1."
                        },
                        new
                        {
                            Id = new Guid("0335093a-beec-44a7-b49a-e98e2fc49246"),
                            Datetime = new DateTime(2024, 5, 29, 15, 45, 57, 832, DateTimeKind.Utc).AddTicks(6965),
                            RequestId = new Guid("cb2951d9-028a-4f0b-b97e-4edea80e6023"),
                            Text = "This is a sample comment 2."
                        },
                        new
                        {
                            Id = new Guid("f01a8f2c-06a3-4ef1-a4d0-315d843782cc"),
                            Datetime = new DateTime(2024, 5, 29, 14, 45, 57, 832, DateTimeKind.Utc).AddTicks(6970),
                            RequestId = new Guid("207fd7b5-d5e5-43e8-80b8-d4c672669797"),
                            Text = "This is a sample comment 3."
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("FileName");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            FileName = "5f65d779-b75a-4e2d-82c7-af7863247a59",
                            RequestId = new Guid("590f67f1-3dc0-4984-849d-7042411ee438")
                        },
                        new
                        {
                            FileName = "a9d28d38-ac96-4106-9474-442cb75bd7a8",
                            RequestId = new Guid("cb2951d9-028a-4f0b-b97e-4edea80e6023")
                        },
                        new
                        {
                            FileName = "8f8976f5-226f-4c2a-b21b-e7cb7990a4c8",
                            RequestId = new Guid("207fd7b5-d5e5-43e8-80b8-d4c672669797")
                        },
                        new
                        {
                            FileName = "91a15f15-a233-425e-86e5-58880814e245",
                            RequestId = new Guid("b5778724-4834-4a5c-855c-7fdc8f26f041")
                        });
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            Nickname = "Administrator",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6080),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            Nickname = "User One",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6096),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            Nickname = "User Two",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6203),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            Nickname = "User Three",
                            Password = "AQAAAAIAAYagAAAAEETyaxS08KjbEL4Dbbk7nacWglX1RF/HtPfY9t+t/SCREycaUxAKYgdtcfaOfLhzMg==",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 6, 28, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6208),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("590f67f1-3dc0-4984-849d-7042411ee438"),
                            DateTime = new DateTime(2024, 5, 29, 16, 45, 57, 832, DateTimeKind.Utc).AddTicks(6638),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            IsOpen = false,
                            OwnerLogin = "user1"
                        },
                        new
                        {
                            Id = new Guid("cb2951d9-028a-4f0b-b97e-4edea80e6023"),
                            DateTime = new DateTime(2024, 5, 29, 14, 45, 57, 832, DateTimeKind.Utc).AddTicks(6674),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("207fd7b5-d5e5-43e8-80b8-d4c672669797"),
                            DateTime = new DateTime(2024, 5, 29, 12, 45, 57, 832, DateTimeKind.Utc).AddTicks(6684),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            IsOpen = false,
                            OwnerLogin = "user2"
                        },
                        new
                        {
                            Id = new Guid("b5778724-4834-4a5c-855c-7fdc8f26f041"),
                            DateTime = new DateTime(2024, 5, 29, 12, 45, 57, 832, DateTimeKind.Utc).AddTicks(6690),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            IsOpen = true,
                            OwnerLogin = "user3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
